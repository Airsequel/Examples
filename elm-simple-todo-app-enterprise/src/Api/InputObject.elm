-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.InputObject exposing (..)

import Api.Interface
import Api.Object
import Api.Scalar
import Api.ScalarCodecs
import Api.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


buildBooleanComparison :
    (BooleanComparisonOptionalFields -> BooleanComparisonOptionalFields)
    -> BooleanComparison
buildBooleanComparison fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { eq = Absent }
    in
    { eq = optionals____.eq }


type alias BooleanComparisonOptionalFields =
    { eq : OptionalArgument Bool }


{-| Type for the BooleanComparison input object.
-}
type alias BooleanComparison =
    { eq : OptionalArgument Bool }


{-| Encode a BooleanComparison into a value that can be used as an argument.
-}
encodeBooleanComparison : BooleanComparison -> Value
encodeBooleanComparison input____ =
    Encode.maybeObject
        [ ( "eq", Encode.bool |> Encode.optional input____.eq ) ]


buildFloatComparison :
    (FloatComparisonOptionalFields -> FloatComparisonOptionalFields)
    -> FloatComparison
buildFloatComparison fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { eq = Absent }
    in
    { eq = optionals____.eq }


type alias FloatComparisonOptionalFields =
    { eq : OptionalArgument Float }


{-| Type for the FloatComparison input object.
-}
type alias FloatComparison =
    { eq : OptionalArgument Float }


{-| Encode a FloatComparison into a value that can be used as an argument.
-}
encodeFloatComparison : FloatComparison -> Value
encodeFloatComparison input____ =
    Encode.maybeObject
        [ ( "eq", Encode.float |> Encode.optional input____.eq ) ]


buildIntComparison :
    (IntComparisonOptionalFields -> IntComparisonOptionalFields)
    -> IntComparison
buildIntComparison fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { eq = Absent }
    in
    { eq = optionals____.eq }


type alias IntComparisonOptionalFields =
    { eq : OptionalArgument Int }


{-| Type for the IntComparison input object.
-}
type alias IntComparison =
    { eq : OptionalArgument Int }


{-| Encode a IntComparison into a value that can be used as an argument.
-}
encodeIntComparison : IntComparison -> Value
encodeIntComparison input____ =
    Encode.maybeObject
        [ ( "eq", Encode.int |> Encode.optional input____.eq ) ]


buildStringComparison :
    (StringComparisonOptionalFields -> StringComparisonOptionalFields)
    -> StringComparison
buildStringComparison fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { eq = Absent }
    in
    { eq = optionals____.eq }


type alias StringComparisonOptionalFields =
    { eq : OptionalArgument String }


{-| Type for the StringComparison input object.
-}
type alias StringComparison =
    { eq : OptionalArgument String }


{-| Encode a StringComparison into a value that can be used as an argument.
-}
encodeStringComparison : StringComparison -> Value
encodeStringComparison input____ =
    Encode.maybeObject
        [ ( "eq", Encode.string |> Encode.optional input____.eq ) ]


buildTodos_filter :
    (Todos_filterOptionalFields -> Todos_filterOptionalFields)
    -> Todos_filter
buildTodos_filter fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { rowid = Absent, title = Absent, completed = Absent }
    in
    { rowid = optionals____.rowid, title = optionals____.title, completed = optionals____.completed }


type alias Todos_filterOptionalFields =
    { rowid : OptionalArgument IntComparison
    , title : OptionalArgument StringComparison
    , completed : OptionalArgument BooleanComparison
    }


{-| Type for the Todos\_filter input object.
-}
type alias Todos_filter =
    { rowid : OptionalArgument IntComparison
    , title : OptionalArgument StringComparison
    , completed : OptionalArgument BooleanComparison
    }


{-| Encode a Todos\_filter into a value that can be used as an argument.
-}
encodeTodos_filter : Todos_filter -> Value
encodeTodos_filter input____ =
    Encode.maybeObject
        [ ( "rowid", encodeIntComparison |> Encode.optional input____.rowid ), ( "title", encodeStringComparison |> Encode.optional input____.title ), ( "completed", encodeBooleanComparison |> Encode.optional input____.completed ) ]


buildTodos_insert_input :
    Todos_insert_inputRequiredFields
    -> (Todos_insert_inputOptionalFields -> Todos_insert_inputOptionalFields)
    -> Todos_insert_input
buildTodos_insert_input required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { rowid = Absent, completed = Absent }
    in
    { rowid = optionals____.rowid, title = required____.title, completed = optionals____.completed }


type alias Todos_insert_inputRequiredFields =
    { title : String }


type alias Todos_insert_inputOptionalFields =
    { rowid : OptionalArgument Int
    , completed : OptionalArgument Bool
    }


{-| Type for the Todos\_insert\_input input object.
-}
type alias Todos_insert_input =
    { rowid : OptionalArgument Int
    , title : String
    , completed : OptionalArgument Bool
    }


{-| Encode a Todos\_insert\_input into a value that can be used as an argument.
-}
encodeTodos_insert_input : Todos_insert_input -> Value
encodeTodos_insert_input input____ =
    Encode.maybeObject
        [ ( "rowid", Encode.int |> Encode.optional input____.rowid ), ( "title", Encode.string input____.title |> Just ), ( "completed", Encode.bool |> Encode.optional input____.completed ) ]


buildTodos_set_input :
    (Todos_set_inputOptionalFields -> Todos_set_inputOptionalFields)
    -> Todos_set_input
buildTodos_set_input fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { rowid = Absent, title = Absent, completed = Absent }
    in
    { rowid = optionals____.rowid, title = optionals____.title, completed = optionals____.completed }


type alias Todos_set_inputOptionalFields =
    { rowid : OptionalArgument Int
    , title : OptionalArgument String
    , completed : OptionalArgument Bool
    }


{-| Type for the Todos\_set\_input input object.
-}
type alias Todos_set_input =
    { rowid : OptionalArgument Int
    , title : OptionalArgument String
    , completed : OptionalArgument Bool
    }


{-| Encode a Todos\_set\_input into a value that can be used as an argument.
-}
encodeTodos_set_input : Todos_set_input -> Value
encodeTodos_set_input input____ =
    Encode.maybeObject
        [ ( "rowid", Encode.int |> Encode.optional input____.rowid ), ( "title", Encode.string |> Encode.optional input____.title ), ( "completed", Encode.bool |> Encode.optional input____.completed ) ]
