-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql
module Api.Query exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)
import Api.Object
import Api.Interface
import Api.Union
import Api.Scalar
import Api.InputObject
import Api.ScalarCodecs
import Graphql.Internal.Builder.Object as Object
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Json.Decode as Decode exposing (Decoder)
import Graphql.Internal.Encode as Encode exposing (Value)

type alias TodosOptionalArguments = { filter : OptionalArgument Api.InputObject.Todos_filter }

{-| Rows from the table "todos"

  - filter - Filter to select specific rows

-}
todos : (TodosOptionalArguments -> TodosOptionalArguments)
 -> SelectionSet decodesTo Api.Object.Todos_row
 -> SelectionSet (List decodesTo) RootQuery
todos fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { filter = Absent }

        optionalArgs____ =
            [ Argument.optional "filter" filledInOptionals____.filter (Api.InputObject.encodeTodos_filter) ]
                |> List.filterMap Basics.identity
    in
      Object.selectionForCompositeField "todos" optionalArgs____ (object____) (Basics.identity >> Decode.list)
