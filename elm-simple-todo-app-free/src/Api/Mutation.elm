-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql
module Api.Mutation exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)
import Api.Object
import Api.Interface
import Api.Union
import Api.Scalar
import Api.InputObject
import Api.ScalarCodecs
import Graphql.Internal.Builder.Object as Object
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Json.Decode as Decode exposing (Decoder)
import Graphql.Internal.Encode as Encode exposing (Value)

type alias DeleteTodosRequiredArguments = { filter : Api.InputObject.Todos_filter }

{-| Delete rows in table "todos"

  - filter - Filter to select rows to be deleted

-}
delete_todos : DeleteTodosRequiredArguments
 -> SelectionSet decodesTo Api.Object.Todos_mutation_response
 -> SelectionSet decodesTo RootMutation
delete_todos requiredArgs____ object____ =
      Object.selectionForCompositeField "delete_todos" [ Argument.required "filter" requiredArgs____.filter (Api.InputObject.encodeTodos_filter) ] (object____) (Basics.identity)


type alias UpdateTodosRequiredArguments = { filter : Api.InputObject.Todos_filter
 , set : Api.InputObject.Todos_set_input }

{-| Update rows in table "todos"

  - filter - Filter to select rows to be updated
  - set - Fields to be updated

-}
update_todos : UpdateTodosRequiredArguments
 -> SelectionSet decodesTo Api.Object.Todos_mutation_response
 -> SelectionSet decodesTo RootMutation
update_todos requiredArgs____ object____ =
      Object.selectionForCompositeField "update_todos" [ Argument.required "filter" requiredArgs____.filter (Api.InputObject.encodeTodos_filter), Argument.required "set" requiredArgs____.set (Api.InputObject.encodeTodos_set_input) ] (object____) (Basics.identity)


type alias InsertTodosRequiredArguments = { objects : (List Api.InputObject.Todos_insert_input) }

{-| Insert new rows in table "todos"

  - objects - Rows to be inserted

-}
insert_todos : InsertTodosRequiredArguments
 -> SelectionSet decodesTo Api.Object.Todos_mutation_response
 -> SelectionSet decodesTo RootMutation
insert_todos requiredArgs____ object____ =
      Object.selectionForCompositeField "insert_todos" [ Argument.required "objects" requiredArgs____.objects (Api.InputObject.encodeTodos_insert_input |> Encode.list) ] (object____) (Basics.identity)
